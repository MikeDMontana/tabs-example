function nav(){$("#menu-primary .menu-item-has-children").off("mouseenter"),$("#menu-primary .menu-item-has-children").off("mouseleave"),$(".sub-menu .menu-item-has-children").off("mouseenter"),$("#menu-primary > .menu-item-has-children > div").off("mouseleave"),$(".menu-item-has-children").off("click"),$(".burger").off("click"),$(window).width()>991?($("#menu-primary .menu-item-has-children").on("mouseenter",function(){$(this).addClass("hovered"),$(this).offset().left+$(this).find(">div").width()>$(this).parent().offset().left+$(this).parent().width()&&$(this).find(">div").css("left","-"+($(this).offset().left+$(this).find(">div").width()-$(this).parent().offset().left-$(this).parent().width())+"px")}),$("#menu-primary .menu-item-has-children").on("mouseleave",function(){$(this).removeClass("hovered")}),$(".sub-menu .menu-item-has-children").on("mouseenter",function(){$(this).parent().find(".hovered").removeClass("hovered"),$(this).addClass("hovered"),$(this).parent().parent().find(".sub").html($(this).find("div").html())}),$(".sub-menu > .menu-item").on("mouseenter",function(){$(this).hasClass("menu-item-has-children")||($(this).parent().parent().find(".sub").html(""),$(this).parent().find(".hovered").removeClass("hovered"))}),$("#menu-primary > .menu-item-has-children > div").on("mouseleave",function(){$(this).find(".hovered").removeClass("hovered"),$(this).find(".sub").html("")})):($(".burger").on("click",function(){$(this).toggleClass("open"),$(".navigation").slideToggle(),$("body").toggleClass("overflow")}),$(".menu-item-has-children").on("click",function(e){e.stopPropagation(),$(this).toggleClass("open")}))}$(function(){if(nav(),$(window).on("resize",nav),$(".anchor").length&&$(".anchor").on("click",function(e){e.preventDefault(),$("html, body").animate({scrollTop:$("#"+this.href.split("#")[1]).offset().top-$("header").height()-20},1e3)}),location.hash&&$(location.hash).length&&$("html, body").animate({scrollTop:$(location.hash).offset().top-$("header").height()-20},1e3),$(".tabs").length&&($(".tabs-nav > div").on("click",function(){$(this).parents(".tabs").find(".active").removeClass("active"),$(this).addClass("active"),$("#"+$(this).data("id")).addClass("active")}),$(".tab-title").on("click",function(){$(this).toggleClass("active").next().toggleClass("active")})),$("[same-height]").length&&setTimeout(function(){$("[same-height]").each(function(){let e=$(this).attr("same-height"),t=0;$('[same-height="'+e+'"]').each(function(){t=$(this).height()>t?$(this).height():t}),$('[same-height="'+e+'"]').height(t)})},1e3),$(".owl-carousel").length){let e=$(".owl-carousel").attr("data-items");$(window).width()<992&&(e=3==$(".owl-carousel").attr("data-items")?2:1),$(window).width()<768&&(e=1),e<$(".owl-carousel .owl-block").length&&$(".owl-carousel").owlCarousel({loop:!0,margin:36,nav:!0,center:3==$(".owl-carousel").attr("data-items"),responsive:{0:{items:1},768:{items:3==$(".owl-carousel").attr("data-items")?2:1,loop:$(".owl-carousel .owl-block").length>1,center:$(".owl-carousel .owl-block").length>(3==$(".owl-carousel").attr("data-items")?2:1)},992:{items:$(".owl-carousel").attr("data-items"),loop:$(".owl-carousel .owl-block").length>$(".owl-carousel").attr("data-items"),center:3==$(".owl-carousel").attr("data-items")&&$(".owl-carousel .owl-block").length>$(".owl-carousel").attr("data-items")}}})}$('a[href^="#modal-"], .open-modal').on("click",function(e){e.preventDefault();let t="#"+this.href.split("#")[1];$(t).css("display",$(window).width()>767?"flex":"block").delay(50).promise().done(function(){$(t).addClass("open")})}),$(".modal-close").on("click",function(e){e.preventDefault(),$(this).parents(".modal").removeClass("open").hide()})});




setTimeout(function() {
//Go through each carousel on the page
$('.owl-carousel').each(function() {
    //Find each set of dots in this carousel
  $(this).find('.owl-dot').each(function(index) {
    //Add one to index so it starts from 1
    $(this).attr('aria-label', 'Slide '+(index + 1));
    
     $(this).find('span').each(function() {
	      $(this).html(' ');
	       });
	     
	     
  });
});
	
	
	}, 500);

//   let tab;

// // ========== BEGIN anchor tags inside tabs handler =====================================

// // VANILLA JS Page load function for inspecting hash
// window.addEventListener('load', (e) => {
//   const { hash } = window.location;

//   // If a # exists in the url AND it is a tab call tabOpener function
//   if (hash.includes('#tab')) {
//     tab = hash.replace('#', '');
//     return tabOpener(tab);
//   }

// }, false);

// // promise based function that waits for element to exist before firing. Returns element with ID from hash
// function waitForElm(selector) {
//   return new Promise(resolve => {
//       if (document.querySelector(selector)) {
//           return resolve(document.querySelector(selector));
//       }

//       const observer = new MutationObserver(mutations => {
//           if (document.querySelector(selector)) {
//               resolve(document.querySelector(selector));
//               observer.disconnect();
//           }
//       });

//       observer.observe(document.body, {
//           childList: true,
//           subtree: true
//       });
//   });
// }

// // const tabOpener = function(tab) {
// //   // send the tab to the waitForElm() and return tab with ID, then run function which clicks the tab open and scrolls to it
// //   waitForElm('#' + tab).then((anchorEl) => {
// //   const parentID = anchorEl.parentNode.id;
// //   const navTarget = document.querySelector('[data-id="'+ parentID +'"]');
// //   if ( typeof tab == 'string' && tab.includes('tab')) {
// //         navTarget.click();
// //         navTarget.scrollIntoView({behavior: 'smooth', block: 'center'});
// //       }
// // });

// // }

// const tabOpener = function(tab, anchorEl) {
//   // Check if the element with the ID equal to tab exists in the DOM
//   const targetElement = document.querySelector('#' + tab);
//   if (targetElement) {
//     const parentID = targetElement.parentNode.id;
//     const navTarget = document.querySelector(`[data-id="` + parentID + `"]`);
//     navTarget.click();
//     anchorEl.scrollIntoView({behavior: 'smooth', block: 'center'});
//     console.log('scrollIntoView called');
//   } else {
//     console.error(`The element with ID "${tab}" was not found in the DOM.`);
//   }
// }

// waitForElm('#' + tab).then((anchorEl) => {
//   tabOpener(tab, anchorEl);
// });

// // ========== END anchor tags inside tabs handler =====================================


// VANILLA JS Page load function for inspecting hash
window.addEventListener('load', (e) => {
  const { hash } = window.location;
  let tab;

  // If a # exists in the url AND it is a tab call tabOpener function
  if (hash.includes('#tab')) {
    tab = hash.replace('#', '');
    return tabOpener(tab);
  }
}, false);

// Promise based function that waits for element to exist before firing. Returns element with ID from hash
function waitForElm(selector) {
  return new Promise(resolve => {
    if (document.querySelector(selector)) {
      return resolve(document.querySelector(selector));
    }

    const observer = new MutationObserver(mutations => {
      if (document.querySelector(selector)) {
        resolve(document.querySelector(selector));
        observer.disconnect();
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  });
}

const tabOpener = function(tab) {
  // Send the tab to the waitForElm() and return tab with ID, then run function which clicks the tab open and scrolls to it
  waitForElm('#' + tab).then((anchorEl) => {
    const parentID = anchorEl.parentNode.id;
    const navTarget = document.querySelector('[data-id="'+ parentID +'"]');
    if ( typeof tab == 'string' && tab.includes('tab')) {
      navTarget.click();
      // anchorEl.scrollIntoView({behavior: 'smooth', block: 'start'});
      // console.log('anchorEl:', anchorEl);
      window.scrollTo(0, 500);


    }
  });
};
